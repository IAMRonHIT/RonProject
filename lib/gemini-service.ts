// Gemini 2.5 Pro Preview API service for code generation

// Define a mock type to replace the removed SonarResponse type
interface HealthcareResearchResult {
  reasoning?: string;
  finalAnswer?: string;
  searchResults?: Array<{ title: string; url: string; snippet: string }>;
}

// Types for Gemini API responses
export interface GeminiResponse {
  carePlan: {
    assessment: string;
    implementation: string;
    evaluation: string;
  };
  fhirJson: string;
  reactComponentCode: string; // The React component code generated by Gemini
}

export interface GeminiCallbacks {
  onProgress?: (progress: number) => void;
  onComplete?: (response: GeminiResponse) => void;
  onError?: (error: Error) => void;
}

/**
 * Combines healthcare reasoning output with FHIR JSON to create a prompt for Gemini
 */
export function createGeminiPrompt(researchResults: HealthcareResearchResult, fhirJson: string): string {
  try {
    const fhir = JSON.parse(fhirJson);
    
    // Extract relevant information from FHIR JSON
    const patientName = fhir.subject?.display || "the patient";
    const condition = fhir.addresses?.[0]?.display || "the condition";
    
    // Create a structured prompt for Gemini with complete context
    return `
Based on the following research findings and FHIR data, create a comprehensive care plan for ${patientName} who has ${condition}.

SOURCE REASONING:
${researchResults.reasoning || ""}

RESEARCH FINDINGS:
${researchResults.finalAnswer || ""}

SEARCH RESULTS:
${researchResults.searchResults?.map((result: { title: string; url: string; snippet: string }) => `- ${result.title}: ${result.snippet}`).join('\n') || ""}

FHIR DATA:
${JSON.stringify(fhir, null, 2)}

Please generate a COMPREHENSIVE care plan in ADPIE format with the following sections. Be detailed and thorough in each section:

1. ASSESSMENT: A detailed, clinically accurate assessment of the patient's condition based on the data provided. Include all relevant observations, symptoms, test results, and patient history.

2. IMPLEMENTATION: Provide at least 8-10 specific, actionable implementation steps for the care plan. Include clear timeframes, dosages where appropriate, and specific instructions. Be comprehensive and specific.

3. EVALUATION: Detailed criteria and specific timeframes for evaluating the effectiveness of the care plan. Include both short-term and long-term evaluation metrics, specific target values for improvement, and follow-up schedules.

Format your response as a structured JSON object with these three sections. Be extremely detailed and thorough in each section.
`;
  } catch (error) {
    console.error("Error creating Gemini prompt:", error);
    return `
Based on the following research, create a comprehensive care plan.

RESEARCH FINDINGS:
${researchResults.finalAnswer || ""}

SEARCH RESULTS:
${researchResults.searchResults?.map((result: { title: string; url: string; snippet: string }) => `- ${result.title}: ${result.snippet}`).join('\n') || ""}

Please generate a care plan in ADPIE format with the following sections:
1. Assessment: Detailed assessment of the patient's condition.
2. Implementation: Specific implementation steps for the care plan.
3. Evaluation: Criteria and timeframes for evaluating the effectiveness of the care plan.

Format your response as a structured JSON object with these three sections.
`;
  }
}

/**
 *  sending a prompt to Gemini 2.5 Pro API
 * In a real implementation, this would use the actual API
 */
export async function sendToGemini(
  prompt: string,
  callbacks: GeminiCallbacks = {}
): Promise<GeminiResponse> {
  try {
    // In a real implementation, this would be an API call to Gemini
    // For now, we'll simulate the response with a delay
    
    // Simulate progress updates
    for (let i = 0; i <= 100; i += 10) {
      await new Promise(resolve => setTimeout(resolve, 100));
      callbacks.onProgress?.(i);
    }
    
    // Simulate final response
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const response: GeminiResponse = {
      carePlan: {
        assessment: "Patient presents with Type 2 Diabetes Mellitus diagnosed 3 years ago. Blood glucose readings consistently above target range (140-180 mg/dL). HbA1c: 8.2%. BMI: 32. Reports fatigue and occasional blurred vision. Currently taking Metformin 1000mg twice daily. Assessment reveals ineffective self-health management related to insufficient knowledge of diabetes care as evidenced by elevated blood glucose levels and reported uncertainty about dietary choices.",
        implementation: "1. Monitor blood glucose 4 times daily (before meals and at bedtime) and record results in a logbook or smartphone app.\n2. Schedule consultation with registered dietitian within 2 weeks for personalized meal planning with emphasis on carbohydrate counting and portion control.\n3. Begin structured physical activity program: Start with 10-minute walks daily, gradually increasing to 30 minutes of moderate-intensity exercise 5 days/week.\n4. Enroll in diabetes self-management education program within 1 month to improve knowledge of condition management.\n5. Continue Metformin 1000mg twice daily with meals as prescribed.\n6. Implement foot care routine with daily inspection and proper hygiene.\n7. Schedule eye examination with ophthalmologist within 3 months.\n8. Establish regular follow-up appointments with healthcare provider every 3 months.",
        evaluation: "Reassess in 3 months with the following target outcomes:\n1. HbA1c reduced to <7.0%\n2. Blood glucose readings within target range (80-130 mg/dL fasting, <180 mg/dL postprandial)\n3. Demonstrated understanding of diabetes self-management principles as evidenced by accurate blood glucose monitoring technique and food diary maintenance\n4. Increased physical activity tolerance to 30 minutes of continuous moderate exercise\n5. Weight reduction of 5-10% from baseline\n6. Absence of diabetes-related complications\n7. Improved energy levels and reduction in reported symptoms"
      },
      reactComponentCode: `
import React from 'react';
import { motion } from 'framer-motion';

export function DiabetesCareComponent() {
  return (
    <div className="p-6 max-w-6xl mx-auto">
      <h2 className="text-3xl font-bold text-[#00FFFF] mb-6">Diabetes Management Plan</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="bg-gray-900/50 p-6 rounded-lg border border-[#00FFFF]/20 shadow-lg">
          <h3 className="text-xl font-semibold text-[#00FFFF] mb-4">Assessment</h3>
          <p className="text-gray-300 whitespace-pre-line">Patient presents with Type 2 Diabetes Mellitus diagnosed 3 years ago. Blood glucose readings consistently above target range (140-180 mg/dL). HbA1c: 8.2%. BMI: 32. Reports fatigue and occasional blurred vision.</p>
        </motion.div>
        
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
          className="bg-gray-900/50 p-6 rounded-lg border border-[#00FFFF]/20 shadow-lg">
          <h3 className="text-xl font-semibold text-[#00FFFF] mb-4">Implementation</h3>
          <ol className="list-decimal pl-5 text-gray-300 space-y-2">
            <li>Monitor blood glucose 4 times daily</li>
            <li>Schedule consultation with dietitian</li>
            <li>Begin structured physical activity program</li>
            <li>Enroll in diabetes education program</li>
            <li>Continue medication as prescribed</li>
            <li>Implement daily foot care routine</li>
          </ol>
        </motion.div>
        
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.4 }}
          className="bg-gray-900/50 p-6 rounded-lg border border-[#00FFFF]/20 shadow-lg">
          <h3 className="text-xl font-semibold text-[#00FFFF] mb-4">Evaluation</h3>
          <p className="text-gray-300 mb-2">Reassess in 3 months with target outcomes:</p>
          <ul className="list-disc pl-5 text-gray-300 space-y-1">
            <li>HbA1c reduced to <7.0%</li>
            <li>Blood glucose within target range</li>
            <li>Demonstrated self-management skills</li>
            <li>Increased physical activity tolerance</li>
            <li>Weight reduction of 5-10%</li>
          </ul>
        </motion.div>
      </div>
    </div>
  );
}
`,
      fhirJson: `{
  "resourceType": "CarePlan",
  "id": "diabetes-care-plan",
  "status": "active",
  "intent": "plan",
  "title": "Diabetes Type 2 Management Plan",
  "subject": {
    "reference": "Patient/example",
    "display": "John Doe"
  },
  "period": {
    "start": "2025-04-30"
  },
  "created": "2025-04-30",
  "author": {
    "reference": "Practitioner/ron-ai",
    "display": "Ron AI"
  },
  "careTeam": [
    {
      "reference": "CareTeam/diabetes-management"
    }
  ],
  "addresses": [
    {
      "reference": "Condition/diabetes-type-2",
      "display": "Type 2 Diabetes Mellitus"
    }
  ],
  "supportingInfo": [
    {
      "reference": "Observation/blood-glucose",
      "display": "Blood Glucose Measurements"
    },
    {
      "reference": "Observation/hba1c",
      "display": "HbA1c Measurements"
    }
  ],
  "goal": [
    {
      "reference": "Goal/blood-glucose-control",
      "display": "Maintain blood glucose within target range"
    },
    {
      "reference": "Goal/weight-management",
      "display": "Achieve and maintain healthy weight"
    }
  ],
  "activity": [
    {
      "reference": "ServiceRequest/diabetes-education",
      "detail": {
        "status": "scheduled",
        "description": "Diabetes self-management education",
        "category": {
          "coding": [
            {
              "system": "http://terminology.hl7.org/CodeSystem/care-plan-activity-category",
              "code": "education",
              "display": "Education"
            }
          ]
        }
      }
    },
    {
      "detail": {
        "status": "scheduled",
        "description": "30 minutes of moderate exercise 5 days per week",
        "category": {
          "coding": [
            {
              "system": "http://terminology.hl7.org/CodeSystem/care-plan-activity-category",
              "code": "activity",
              "display": "Activity"
            }
          ]
        }
      }
    }
  ],
  "note": [
    {
      "text": "Patient is motivated to improve health but has concerns about medication side effects."
    }
  ],
  "extension": [
    {
      "url": "http://example.org/fhir/StructureDefinition/adpie-nursing-process",
      "extension": [
        {
          "url": "assessment",
          "valueString": "Patient presents with Type 2 Diabetes Mellitus diagnosed 3 years ago. Blood glucose readings consistently above target range (140-180 mg/dL). HbA1c: 8.2%. BMI: 32. Reports fatigue and occasional blurred vision. Currently taking Metformin 1000mg twice daily."
        },
        {
          "url": "diagnosis",
          "valueString": "Ineffective self-health management related to insufficient knowledge of diabetes care as evidenced by elevated blood glucose levels and reported uncertainty about dietary choices."
        },
        {
          "url": "planning",
          "valueString": "Establish regular monitoring schedule, implement dietary modifications, increase physical activity, and provide comprehensive diabetes education."
        },
        {
          "url": "implementation",
          "valueString": "1. Monitor blood glucose 4 times daily and record results. 2. Consult with dietitian for meal planning. 3. Begin walking program starting with 10 minutes daily, increasing to 30 minutes 5 days/week. 4. Attend diabetes self-management education program."
        },
        {
          "url": "evaluation",
          "valueString": "Reassess in 3 months. Target outcomes: HbA1c < 7.0%, blood glucose readings within target range, demonstrated understanding of diabetes self-management, and increased physical activity tolerance."
        }
      ]
    }
  ]
}`
    };
    
    callbacks.onComplete?.(response);
    return response;
    
  } catch (error) {
    const err = error instanceof Error ? error : new Error(String(error));
    callbacks.onError?.(err);
    throw err;
  }
}

/**
 * Send a prompt to Gemini 2.5 Pro API via the Next.js API route
 * This uses the actual API route to communicate with Gemini
 */
export async function sendToGeminiReal(
  prompt: string,
  callbacks: GeminiCallbacks = {}
): Promise<GeminiResponse> {
  try {
    // Track progress for UI feedback
    callbacks.onProgress?.(10);
    
    // Make request to our API route
    const response = await fetch('/api/gemini', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        prompt,
        temperature: 0.2,
        maxOutputTokens: 8192
      })
    });

    callbacks.onProgress?.(50);

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`API route error: ${response.status} - ${errorText}`);
    }

    callbacks.onProgress?.(80);

    // Parse the response
    const data = await response.json();
    
    // Check for error
    if (data.error) {
      throw new Error(data.error);
    }
    
    // Extract the care plan, FHIR JSON, and React component code
    const result: GeminiResponse = {
      carePlan: data.carePlan,
      fhirJson: data.fhirJson,
      reactComponentCode: data.reactComponentCode || ''
    };
    
    callbacks.onProgress?.(100);
    callbacks.onComplete?.(result);
    return result;
    
  } catch (error) {
    const err = error instanceof Error ? error : new Error(String(error));
    callbacks.onError?.(err);
    throw err;
  }
}
