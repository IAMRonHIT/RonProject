"use client";

import React, { useState, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Card } from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { 
  Check, ChevronDown, User, Activity, AlertCircle, 
  Plus, X, Loader2, Trash2, UserCircle, Thermometer, 
  Heart, Clipboard, PlusCircle, FileText, Stethoscope,
  FlaskConical, Pill, FilePlus, Dna, Droplets, Radiation
} from 'lucide-react';
import { 
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from "@/components/ui/accordion";
import { 
  Popover, 
  PopoverContent, 
  PopoverTrigger 
} from "@/components/ui/popover";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { 
  Command, 
  CommandEmpty, 
  CommandGroup, 
  CommandInput, 
  CommandItem, 
  CommandList 
} from "@/components/ui/command";
import { 
  RadioGroup, 
  RadioGroupItem 
} from "@/components/ui/radio-group";
import { Checkbox } from "@/components/ui/checkbox";
import { Label } from "@/components/ui/label";
import { cn } from '@/lib/utils';

interface PatientScenario {
  name: string;
  description: string;
  data: FormState;
}

interface PatientDataFormProps {
  onSubmit: (data: FormState) => void; // Removed useStreaming parameter
  isLoading: boolean;
}

interface Notification {
  message: string;
  type: 'success' | 'error' | 'info';
}

type ConnectionStatus = 'unknown' | 'connected' | 'error';

// Constants for dropdowns
const DIAGNOSES = [
  'Hypertension', 'Diabetes Mellitus', 'Osteoarthritis', 'Depressive Disorders', 'Acute Respiratory Infections', 
  'Retinal Disorders', 'Joint Disorders', 'Cataracts', 'Hyperlipidemias', 'Conditions of the Spine and Back', 
  'Attention-Deficit Hyperactivity Disorder', 'Otitis Media', 'Acute Pharyngitis', 'Obstructive Sleep Apnea', 
  'Glaucoma', 'Coronary Atherosclerosis', 'Gastroesophageal Reflux Disease', 'Sinusitis', 'Allergic Rhinitis', 
  'Cardiac Dysrhythmias', 'Asthma', 'Chronic Obstructive Pulmonary Disease (COPD)', 'Anxiety Disorders', 
  'Heart Disease', 'Stroke', 'Cancer', 'Alzheimer\'s Disease', 'Infectious Diseases', 'Influenza', 'Pneumonia', 
  'Sexually Transmitted Diseases (STD)', 'Arthritis', 'Osteoporosis', 'Kidney Disease', 'Digestive Diseases', 
  'Chronic Liver Disease', 'Cirrhosis', 'Allergies', 'Anemia', 'Iron Deficiency', 'Cardiovascular Disease', 
  'Cerebrovascular Disease', 'Cholesterol', 'Dementia', 'Mental Health Conditions', 'Oral and Dental Health Issues', 
  'Injuries', 'Accidents', 'Trauma', 'Birth Defects', 'Congenital Anomalies', 'Conditions of the Skin', 
  'Genitourinary Disorders', 'Neoplasms', 'Urinary Tract Infection (UTI)', 'Low Back Pain', 'Abdominal Pain', 
  'Fatigue', 'Malaise', 'Viral Hepatitis', 'HIV/AIDS', 'Measles', 'Mumps', 'Rubella', 'Whooping Cough', 'Pertussis', 
  'Chronic Sinusitis', 'Migraine', 'Conjunctivitis', 'Pyrexia (Fever)', 'Contusion (Bruise)', 'Cystitis', 
  'Hyperhidrosis (Excessive Sweating)', 'Gastroenteritis', 'Bronchitis', 'Eczema', 'Dermatitis', 'Psoriasis', 
  'Acne', 'Cellulitis', 'Abscess', 'Ischemic Heart Disease', 'Heart Failure', 'Angina', 'Arrhythmia', 
  'Atrial Fibrillation', 'Ventricular Fibrillation', 'Myocardial Infarction (Heart Attack)', 'Valvular Heart Disease', 
  'Cardiomyopathy', 'Peripheral Artery Disease', 'Deep Vein Thrombosis (DVT)', 'Pulmonary Embolism (PE)', 'Aneurysm', 
  'Transient Ischemic Attack (TIA)', 'Epilepsy', 'Seizure Disorders', 'Parkinson\'s Disease', 'Multiple Sclerosis (MS)', 
  'Amyotrophic Lateral Sclerosis (ALS)', 'Vascular Dementia', 'Frontotemporal Dementia', 'Lewy Body Dementia', 
  'Substance Abuse Disorders', 'Alcoholism', 'Drug Addiction', 'Schizophrenia', 'Bipolar Disorder', 
  'Post-Traumatic Stress Disorder (PTSD)', 'Obsessive-Compulsive Disorder (OCD)', 'Eating Disorders', 
  'Anorexia Nervosa', 'Bulimia Nervosa', 'Binge Eating Disorder', 'Personality Disorders', 
  'Borderline Personality Disorder', 'Narcissistic Personality Disorder', 'Anxiety', 'Panic Disorder', 'Phobias', 
  'Social Anxiety Disorder', 'Generalized Anxiety Disorder', 'Depression', 'Major Depressive Disorder', 
  'Persistent Depressive Disorder', 'Premenstrual Dysphoric Disorder (PMDD)', 'Disruptive Mood Dysregulation Disorder',
  'Congestive Heart Failure'
];

const ALLERGIES = [
  'No Known Allergies', 'Penicillin', 'Sulfa Drugs', 'NSAIDs', 'Aspirin', 'Iodine', 'Latex', 
  'Contrast Dye', 'Eggs', 'Peanuts', 'Tree Nuts', 'Shellfish', 'Fish', 'Milk', 'Wheat', 'Soy',
  'Sesame', 'Codeine', 'Morphine', 'Tetracycline', 'Erythromycin', 'Cephalosporins'
];

const LAB_TESTS = [
  'Complete Blood Count (CBC)', 'Basic Metabolic Panel (BMP)', 'Comprehensive Metabolic Panel (CMP)',
  'Lipid Panel', 'Hemoglobin A1C', 'C-Reactive Protein (CRP)', 'Erythrocyte Sedimentation Rate (ESR)',
  'TSH (Thyroid Stimulating Hormone)', 'BNP (Brain Natriuretic Peptide)', 'Troponin',
  'Liver Function Tests (LFTs)', 'PT/INR', 'D-Dimer', 'Urinalysis', 'Urine Culture',
  'Blood Culture', 'Arterial Blood Gas (ABG)', 'Potassium', 'Sodium', 'Calcium',
  'Magnesium', 'Phosphorus', 'eGFR', 'Creatinine', 'BUN (Blood Urea Nitrogen)'
];

const MEDICATIONS = [
  'Lisinopril', 'Metoprolol', 'Atorvastatin', 'Amlodipine', 'Metformin', 
  'Levothyroxine', 'Omeprazole', 'Albuterol', 'Hydrochlorothiazide', 'Gabapentin',
  'Losartan', 'Furosemide', 'Simvastatin', 'Citalopram', 'Sertraline',
  'Montelukast', 'Pantoprazole', 'Prednisone', 'Fluoxetine', 'Tramadol'
];

const TREATMENTS = [
  'Physical Therapy', 'Occupational Therapy', 'Speech Therapy', 'Cardiac Rehabilitation',
  'Pulmonary Rehabilitation', 'Dialysis', 'Oxygen Therapy', 'CPAP Therapy',
  'IV Antibiotics', 'Chemotherapy', 'Radiation Therapy', 'Immunotherapy',
  'Cognitive Behavioral Therapy', 'Counseling', 'Wound Care', 'Pain Management'
];

const NYHA_CLASSES = [
  'Class I: No limitation of physical activity',
  'Class II: Slight limitation of physical activity',
  'Class III: Marked limitation of physical activity',
  'Class IV: Unable to carry out any physical activity without discomfort'
];

const GENDERS = ['Male', 'Female', 'Non-binary', 'Other', 'Prefer not to say'];

const INSURANCE_PLANS = [
  'Medicare', 'Medicaid', 'Blue Cross Blue Shield', 'UnitedHealthcare', 'Aetna',
  'Cigna', 'Humana', 'Kaiser Permanente', 'TRICARE', 'Veterans Affairs (VA)'
];

const IMAGING_TYPES = [
  'X-ray', 'CT Scan', 'MRI', 'Ultrasound', 'PET Scan', 'Echocardiogram',
  'Nuclear Medicine Scan', 'Angiogram', 'Mammogram', 'Bone Density Scan'
];

const MED_ROUTES = ['PO', 'IV', 'IM', 'SC', 'Inhaled', 'Topical', 'Transdermal', 'Rectal', 'Sublingual', 'Intranasal'];
const MED_FREQUENCIES = ['Daily', 'BID', 'TID', 'QID', 'Every 4 hours', 'Every 6 hours', 'Every 8 hours', 'Every 12 hours', 'Weekly', 'Monthly', 'As needed'];
const MED_STATUSES = ['Active', 'Discontinued', 'On hold', 'Pending'];
const FLAGS = ['H (High)', 'L (Low)', 'N (Normal)', 'C (Critical)'];
const TRENDS = ['Increasing', 'Decreasing', 'Stable', 'Fluctuating'];
const TREATMENT_STATUSES = ['Ordered', 'In progress', 'Completed', 'Discontinued', 'Planned'];

// Pre-defined scenarios
const SCENARIOS: PatientScenario[] = [
  {
    name: "Heart Failure Patient",
    description: "65-year-old male with congestive heart failure",
    data: {
      patient_full_name: "John Doe",
      patient_age: "65",
      patient_gender: "Male",
      patient_mrn: "MRN123456",
      patient_dob: "1958-07-15",
      patient_insurance_plan: "Medicare",
      patient_policy_number: "Medicare123456",
      patient_primary_provider: "Dr. Jane Smith",
      patient_admission_date: "2023-05-01",
      allergies: ["Penicillin", "Sulfa"],
      vitalSigns: {
        vital_bp: "138/88",
        vital_pulse: "88",
        vital_resp_rate: "18",
        vital_temp: "98.6",
        vital_o2sat: "94%",
        vital_pain_score: "2"
      },
      nyha_class_description: "Class II: Slight limitation of physical activity",
      primary_diagnosis_text: "Congestive Heart Failure",
      secondaryDiagnoses: ["Hypertension", "Type 2 Diabetes", "Hyperlipidemia"],
      labs: [
        {
          lab_n_name: "BNP",
          lab_n_value: "850 pg/mL",
          lab_n_flag: "H (High)",
          lab_n_trend: "Increasing"
        },
        {
          lab_n_name: "Potassium",
          lab_n_value: "4.0 mEq/L",
          lab_n_flag: "N (Normal)",
          lab_n_trend: "Stable"
        },
        {
          lab_n_name: "eGFR",
          lab_n_value: "55 mL/min",
          lab_n_flag: "L (Low)",
          lab_n_trend: "Decreasing"
        }
      ],
      medications: [
        {
          med_n_name: "Lisinopril",
          med_n_dosage: "10 mg",
          med_n_route: "PO",
          med_n_frequency: "Daily",
          med_n_status: "Active",
          med_n_pa_required: false
        },
        {
          med_n_name: "Metoprolol",
          med_n_dosage: "25 mg",
          med_n_route: "PO",
          med_n_frequency: "BID",
          med_n_status: "Active",
          med_n_pa_required: false
        },
        {
          med_n_name: "Furosemide",
          med_n_dosage: "40 mg",
          med_n_route: "PO",
          med_n_frequency: "Daily",
          med_n_status: "Active",
          med_n_pa_required: false
        }
      ],
      treatments: [
        {
          treatment_n_name: "Cardiac Rehabilitation",
          treatment_n_status: "Ordered",
          treatment_n_details: "3x per week for 12 weeks",
          treatment_n_date: "2023-05-15",
          treatment_n_pa_required: true
        }
      ],
      last_imaging_summary: "Chest X-ray shows cardiomegaly with mild pulmonary edema",
      last_ecg_summary: "Sinus rhythm with left ventricular hypertrophy. Ejection fraction 40%."
    }
  },
  {
    name: "COPD Exacerbation",
    description: "72-year-old female with COPD exacerbation",
    data: {
      patient_full_name: "Mary Johnson",
      patient_age: "72",
      patient_gender: "Female",
      patient_mrn: "MRN789012",
      patient_dob: "1951-03-22",
      patient_insurance_plan: "Medicare",
      patient_policy_number: "Medicare789012",
      patient_primary_provider: "Dr. Robert Chen",
      patient_admission_date: "2023-06-10",
      allergies: ["Codeine", "Latex"],
      vitalSigns: {
        vital_bp: "145/85",
        vital_pulse: "102",
        vital_resp_rate: "24",
        vital_temp: "99.2",
        vital_o2sat: "88%",
        vital_pain_score: "3"
      },
      nyha_class_description: "N/A",
      primary_diagnosis_text: "Chronic Obstructive Pulmonary Disease (COPD)",
      secondaryDiagnoses: ["Hypertension", "Osteoporosis", "Gastroesophageal Reflux Disease"],
      labs: [
        {
          lab_n_name: "Arterial Blood Gas (ABG)",
          lab_n_value: "pH 7.35, pO2 58",
          lab_n_flag: "L (Low)",
          lab_n_trend: "Decreasing"
        },
        {
          lab_n_name: "Complete Blood Count (CBC)",
          lab_n_value: "WBC 12.5",
          lab_n_flag: "H (High)",
          lab_n_trend: "Increasing"
        }
      ],
      medications: [
        {
          med_n_name: "Albuterol",
          med_n_dosage: "2 puffs",
          med_n_route: "Inhaled",
          med_n_frequency: "Every 4 hours",
          med_n_status: "Active",
          med_n_pa_required: false
        },
        {
          med_n_name: "Prednisone",
          med_n_dosage: "40 mg",
          med_n_route: "PO",
          med_n_frequency: "Daily",
          med_n_status: "Active",
          med_n_pa_required: false
        },
        {
          med_n_name: "Azithromycin",
          med_n_dosage: "500 mg",
          med_n_route: "PO",
          med_n_frequency: "Daily",
          med_n_status: "Active",
          med_n_pa_required: false
        }
      ],
      treatments: [
        {
          treatment_n_name: "Oxygen Therapy",
          treatment_n_status: "In progress",
          treatment_n_details: "2L via nasal cannula",
          treatment_n_date: "2023-06-10",
          treatment_n_pa_required: true
        },
        {
          treatment_n_name: "Pulmonary Rehabilitation",
          treatment_n_status: "Planned",
          treatment_n_details: "To start after discharge",
          treatment_n_date: "2023-06-20",
          treatment_n_pa_required: true
        }
      ],
      last_imaging_summary: "Chest X-ray shows hyperinflation and flattened diaphragms consistent with COPD",
      last_ecg_summary: "Sinus tachycardia, rate 102. No acute ischemic changes."
    }
  },
  {
    name: "Diabetes Management",
    description: "58-year-old male with poorly controlled diabetes",
    data: {
      patient_full_name: "Robert Garcia",
      patient_age: "58",
      patient_gender: "Male",
      patient_mrn: "MRN345678",
      patient_dob: "1965-11-03",
      patient_insurance_plan: "UnitedHealthcare",
      patient_policy_number: "UHC345678",
      patient_primary_provider: "Dr. Sarah Williams",
      patient_admission_date: "2023-07-05",
      allergies: ["No Known Allergies"],
      vitalSigns: {
        vital_bp: "152/92",
        vital_pulse: "80",
        vital_resp_rate: "16",
        vital_temp: "98.8",
        vital_o2sat: "97%",
        vital_pain_score: "0"
      },
      nyha_class_description: "N/A",
      primary_diagnosis_text: "Diabetes Mellitus",
      secondaryDiagnoses: ["Hypertension", "Diabetic Neuropathy", "Obesity"],
      labs: [
        {
          lab_n_name: "Hemoglobin A1C",
          lab_n_value: "10.2%",
          lab_n_flag: "H (High)",
          lab_n_trend: "Increasing"
        },
        {
          lab_n_name: "Glucose",
          lab_n_value: "285 mg/dL",
          lab_n_flag: "H (High)",
          lab_n_trend: "Fluctuating"
        },
        {
          lab_n_name: "Creatinine",
          lab_n_value: "1.4 mg/dL",
          lab_n_flag: "H (High)",
          lab_n_trend: "Stable"
        }
      ],
      medications: [
        {
          med_n_name: "Metformin",
          med_n_dosage: "1000 mg",
          med_n_route: "PO",
          med_n_frequency: "BID",
          med_n_status: "Active",
          med_n_pa_required: false
        },
        {
          med_n_name: "Glipizide",
          med_n_dosage: "10 mg",
          med_n_route: "PO",
          med_n_frequency: "Daily",
          med_n_status: "Active",
          med_n_pa_required: false
        },
        {
          med_n_name: "Insulin Glargine",
          med_n_dosage: "25 units",
          med_n_route: "SC",
          med_n_frequency: "Nightly",
          med_n_status: "Active",
          med_n_pa_required: false
        }
      ],
      treatments: [
        {
          treatment_n_name: "Diabetic Education",
          treatment_n_status: "In progress",
          treatment_n_details: "Carbohydrate counting and insulin management",
          treatment_n_date: "2023-07-06",
          treatment_n_pa_required: false
        }
      ],
      last_imaging_summary: "No recent imaging",
      last_ecg_summary: "Normal sinus rhythm. No acute changes."
    }
  },
  {
    name: "Stroke Recovery",
    description: "70-year-old female recovering from ischemic stroke",
    data: {
      patient_full_name: "Elizabeth Chen",
      patient_age: "70",
      patient_gender: "Female",
      patient_mrn: "MRN901234",
      patient_dob: "1953-09-28",
      patient_insurance_plan: "Medicare",
      patient_policy_number: "Medicare901234",
      patient_primary_provider: "Dr. Michael Rodriguez",
      patient_admission_date: "2023-06-20",
      allergies: ["Aspirin", "Shellfish"],
      vitalSigns: {
        vital_bp: "140/80",
        vital_pulse: "72",
        vital_resp_rate: "16",
        vital_temp: "98.2",
        vital_o2sat: "96%",
        vital_pain_score: "1"
      },
      nyha_class_description: "N/A",
      primary_diagnosis_text: "Stroke",
      secondaryDiagnoses: ["Atrial Fibrillation", "Hypertension", "Hyperlipidemia"],
      labs: [
        {
          lab_n_name: "PT/INR",
          lab_n_value: "2.5",
          lab_n_flag: "H (High)",
          lab_n_trend: "Stable"
        },
        {
          lab_n_name: "Lipid Panel",
          lab_n_value: "LDL 140 mg/dL",
          lab_n_flag: "H (High)",
          lab_n_trend: "Decreasing"
        }
      ],
      medications: [
        {
          med_n_name: "Warfarin",
          med_n_dosage: "5 mg",
          med_n_route: "PO",
          med_n_frequency: "Daily",
          med_n_status: "Active",
          med_n_pa_required: false
        },
        {
          med_n_name: "Atorvastatin",
          med_n_dosage: "40 mg",
          med_n_route: "PO",
          med_n_frequency: "Daily",
          med_n_status: "Active",
          med_n_pa_required: false
        },
        {
          med_n_name: "Amlodipine",
          med_n_dosage: "5 mg",
          med_n_route: "PO",
          med_n_frequency: "Daily",
          med_n_status: "Active",
          med_n_pa_required: false
        }
      ],
      treatments: [
        {
          treatment_n_name: "Physical Therapy",
          treatment_n_status: "In progress",
          treatment_n_details: "5x per week for left-sided weakness",
          treatment_n_date: "2023-06-22",
          treatment_n_pa_required: true
        },
        {
          treatment_n_name: "Speech Therapy",
          treatment_n_status: "In progress",
          treatment_n_details: "3x per week for mild dysarthria",
          treatment_n_date: "2023-06-22",
          treatment_n_pa_required: true
        }
      ],
      last_imaging_summary: "MRI brain shows right middle cerebral artery territory infarct",
      last_ecg_summary: "Atrial fibrillation with rate 85."
    }
  },
  {
    name: "Pneumonia",
    description: "45-year-old male with community-acquired pneumonia",
    data: {
      patient_full_name: "James Wilson",
      patient_age: "45",
      patient_gender: "Male",
      patient_mrn: "MRN567890",
      patient_dob: "1978-01-14",
      patient_insurance_plan: "Blue Cross Blue Shield",
      patient_policy_number: "BCBS567890",
      patient_primary_provider: "Dr. Lisa Thompson",
      patient_admission_date: "2023-07-10",
      allergies: ["Penicillin"],
      vitalSigns: {
        vital_bp: "128/78",
        vital_pulse: "95",
        vital_resp_rate: "22",
        vital_temp: "101.3",
        vital_o2sat: "93%",
        vital_pain_score: "2"
      },
      nyha_class_description: "N/A",
      primary_diagnosis_text: "Pneumonia",
      secondaryDiagnoses: ["Asthma"],
      labs: [
        {
          lab_n_name: "Complete Blood Count (CBC)",
          lab_n_value: "WBC 14.5",
          lab_n_flag: "H (High)",
          lab_n_trend: "Decreasing"
        },
        {
          lab_n_name: "C-Reactive Protein (CRP)",
          lab_n_value: "87 mg/L",
          lab_n_flag: "H (High)",
          lab_n_trend: "Decreasing"
        }
      ],
      medications: [
        {
          med_n_name: "Levofloxacin",
          med_n_dosage: "750 mg",
          med_n_route: "IV",
          med_n_frequency: "Daily",
          med_n_status: "Active",
          med_n_pa_required: false
        },
        {
          med_n_name: "Albuterol",
          med_n_dosage: "2 puffs",
          med_n_route: "Inhaled",
          med_n_frequency: "Every 6 hours",
          med_n_status: "Active",
          med_n_pa_required: false
        }
      ],
      treatments: [
        {
          treatment_n_name: "Oxygen Therapy",
          treatment_n_status: "In progress",
          treatment_n_details: "2L via nasal cannula as needed",
          treatment_n_date: "2023-07-10",
          treatment_n_pa_required: false
        }
      ],
      last_imaging_summary: "Chest X-ray shows right lower lobe consolidation consistent with pneumonia",
      last_ecg_summary: "Sinus tachycardia, rate 95. Otherwise normal."
    }
  },
  {
    name: "Post-Surgical Recovery",
    description: "62-year-old female after total knee replacement",
    data: {
      patient_full_name: "Patricia Miller",
      patient_age: "62",
      patient_gender: "Female",
      patient_mrn: "MRN234567",
      patient_dob: "1961-05-18",
      patient_insurance_plan: "Aetna",
      patient_policy_number: "Aetna234567",
      patient_primary_provider: "Dr. David Lee",
      patient_admission_date: "2023-07-01",
      allergies: ["NSAIDs", "Latex"],
      vitalSigns: {
        vital_bp: "132/84",
        vital_pulse: "78",
        vital_resp_rate: "16",
        vital_temp: "99.0",
        vital_o2sat: "97%",
        vital_pain_score: "4"
      },
      nyha_class_description: "N/A",
      primary_diagnosis_text: "Osteoarthritis",
      secondaryDiagnoses: ["Hypertension", "Osteoporosis"],
      labs: [
        {
          lab_n_name: "Hemoglobin",
          lab_n_value: "10.2 g/dL",
          lab_n_flag: "L (Low)",
          lab_n_trend: "Stable"
        },
        {
          lab_n_name: "C-Reactive Protein (CRP)",
          lab_n_value: "45 mg/L",
          lab_n_flag: "H (High)",
          lab_n_trend: "Decreasing"
        }
      ],
      medications: [
        {
          med_n_name: "Oxycodone",
          med_n_dosage: "5 mg",
          med_n_route: "PO",
          med_n_frequency: "Every 4 hours as needed",
          med_n_status: "Active",
          med_n_pa_required: false
        },
        {
          med_n_name: "Acetaminophen",
          med_n_dosage: "1000 mg",
          med_n_route: "PO",
          med_n_frequency: "Every 6 hours",
          med_n_status: "Active",
          med_n_pa_required: false
        },
        {
          med_n_name: "Enoxaparin",
          med_n_dosage: "40 mg",
          med_n_route: "SC",
          med_n_frequency: "Daily",
          med_n_status: "Active",
          med_n_pa_required: false
        }
      ],
      treatments: [
        {
          treatment_n_name: "Physical Therapy",
          treatment_n_status: "In progress",
          treatment_n_details: "2x daily for knee ROM and strengthening",
          treatment_n_date: "2023-07-02",
          treatment_n_pa_required: true
        }
      ],
      last_imaging_summary: "X-ray shows well-positioned right total knee prosthesis",
      last_ecg_summary: "Normal sinus rhythm. No acute changes."
    }
  },
  {
    name: "Depression Treatment",
    description: "35-year-old female with major depressive disorder",
    data: {
      patient_full_name: "Jennifer Taylor",
      patient_age: "35",
      patient_gender: "Female",
      patient_mrn: "MRN678901",
      patient_dob: "1988-08-25",
      patient_insurance_plan: "Cigna",
      patient_policy_number: "Cigna678901",
      patient_primary_provider: "Dr. Emma Martinez",
      patient_admission_date: "2023-06-15",
      allergies: ["No Known Allergies"],
      vitalSigns: {
        vital_bp: "118/72",
        vital_pulse: "68",
        vital_resp_rate: "14",
        vital_temp: "98.4",
        vital_o2sat: "99%",
        vital_pain_score: "0"
      },
      nyha_class_description: "N/A",
      primary_diagnosis_text: "Major Depressive Disorder",
      secondaryDiagnoses: ["Generalized Anxiety Disorder", "Insomnia"],
      labs: [
        {
          lab_n_name: "TSH (Thyroid Stimulating Hormone)",
          lab_n_value: "2.4 mIU/L",
          lab_n_flag: "N (Normal)",
          lab_n_trend: "Stable"
        },
        {
          lab_n_name: "Complete Blood Count (CBC)",
          lab_n_value: "WBC 6.2, Hgb 13.5",
          lab_n_flag: "N (Normal)",
          lab_n_trend: "Stable"
        }
      ],
      medications: [
        {
          med_n_name: "Escitalopram",
          med_n_dosage: "20 mg",
          med_n_route: "PO",
          med_n_frequency: "Daily",
          med_n_status: "Active",
          med_n_pa_required: false
        },
        {
          med_n_name: "Trazodone",
          med_n_dosage: "50 mg",
          med_n_route: "PO",
          med_n_frequency: "Nightly",
          med_n_status: "Active",
          med_n_pa_required: false
        }
      ],
      treatments: [
        {
          treatment_n_name: "Cognitive Behavioral Therapy",
          treatment_n_status: "In progress",
          treatment_n_details: "Weekly sessions",
          treatment_n_date: "2023-06-18",
          treatment_n_pa_required: true
        }
      ],
      last_imaging_summary: "No recent imaging",
      last_ecg_summary: "No recent ECG"
    }
  },
  {
    name: "Renal Failure",
    description: "68-year-old male with chronic kidney disease",
    data: {
      patient_full_name: "George Brown",
      patient_age: "68",
      patient_gender: "Male",
      patient_mrn: "MRN456789",
      patient_dob: "1955-04-12",
      patient_insurance_plan: "Medicare",
      patient_policy_number: "Medicare456789",
      patient_primary_provider: "Dr. Nancy Wilson",
      patient_admission_date: "2023-06-25",
      allergies: ["Contrast Dye", "Sulfa"],
      vitalSigns: {
        vital_bp: "162/94",
        vital_pulse: "82",
        vital_resp_rate: "18",
        vital_temp: "98.0",
        vital_o2sat: "96%",
        vital_pain_score: "1"
      },
      nyha_class_description: "N/A",
      primary_diagnosis_text: "Kidney Disease",
      secondaryDiagnoses: ["Hypertension", "Type 2 Diabetes", "Anemia"],
      labs: [
        {
          lab_n_name: "Creatinine",
          lab_n_value: "3.8 mg/dL",
          lab_n_flag: "H (High)",
          lab_n_trend: "Increasing"
        },
        {
          lab_n_name: "BUN (Blood Urea Nitrogen)",
          lab_n_value: "72 mg/dL",
          lab_n_flag: "H (High)",
          lab_n_trend: "Increasing"
        },
        {
          lab_n_name: "Potassium",
          lab_n_value: "5.3 mEq/L",
          lab_n_flag: "H (High)",
          lab_n_trend: "Increasing"
        },
        {
          lab_n_name: "Hemoglobin",
          lab_n_value: "9.1 g/dL",
          lab_n_flag: "L (Low)",
          lab_n_trend: "Stable"
        }
      ],
      medications: [
        {
          med_n_name: "Losartan",
          med_n_dosage: "50 mg",
          med_n_route: "PO",
          med_n_frequency: "Daily",
          med_n_status: "Active",
          med_n_pa_required: false
        },
        {
          med_n_name: "Sodium Bicarbonate",
          med_n_dosage: "650 mg",
          med_n_route: "PO",
          med_n_frequency: "TID",
          med_n_status: "Active",
          med_n_pa_required: false
        },
        {
          med_n_name: "Epoetin Alfa",
          med_n_dosage: "10,000 units",
          med_n_route: "SC",
          med_n_frequency: "Weekly",
          med_n_status: "Active",
          med_n_pa_required: true
        }
      ],
      treatments: [
        {
          treatment_n_name: "Dialysis",
          treatment_n_status: "In progress",
          treatment_n_details: "Hemodialysis 3x weekly",
          treatment_n_date: "2023-06-26",
          treatment_n_pa_required: true
        }
      ],
      last_imaging_summary: "Renal ultrasound shows bilateral small kidneys with increased echogenicity, consistent with chronic kidney disease",
      last_ecg_summary: "Left ventricular hypertrophy with normal sinus rhythm."
    }
  },
  {
    name: "Acute MI",
    description: "59-year-old male with acute myocardial infarction",
    data: {
      patient_full_name: "Thomas Lewis",
      patient_age: "59",
      patient_gender: "Male",
      patient_mrn: "MRN345678",
      patient_dob: "1964-03-08",
      patient_insurance_plan: "Blue Cross Blue Shield",
      patient_policy_number: "BCBS345678",
      patient_primary_provider: "Dr. John Kim",
      patient_admission_date: "2023-07-12",
      allergies: ["No Known Allergies"],
      vitalSigns: {
        vital_bp: "142/88",
        vital_pulse: "95",
        vital_resp_rate: "18",
        vital_temp: "98.4",
        vital_o2sat: "95%",
        vital_pain_score: "6"
      },
      nyha_class_description: "Class II: Slight limitation of physical activity",
      primary_diagnosis_text: "Myocardial Infarction (Heart Attack)",
      secondaryDiagnoses: ["Coronary Atherosclerosis", "Hypertension", "Hyperlipidemia"],
      labs: [
        {
          lab_n_name: "Troponin",
          lab_n_value: "2.4 ng/mL",
          lab_n_flag: "H (High)",
          lab_n_trend: "Decreasing"
        },
        {
          lab_n_name: "CK-MB",
          lab_n_value: "25 ng/mL",
          lab_n_flag: "H (High)",
          lab_n_trend: "Decreasing"
        },
        {
          lab_n_name: "Lipid Panel",
          lab_n_value: "LDL 160 mg/dL",
          lab_n_flag: "H (High)",
          lab_n_trend: "Stable"
        }
      ],
      medications: [
        {
          med_n_name: "Aspirin",
          med_n_dosage: "81 mg",
          med_n_route: "PO",
          med_n_frequency: "Daily",
          med_n_status: "Active",
          med_n_pa_required: false
        },
        {
          med_n_name: "Ticagrelor",
          med_n_dosage: "90 mg",
          med_n_route: "PO",
          med_n_frequency: "BID",
          med_n_status: "Active",
          med_n_pa_required: false
        },
        {
          med_n_name: "Atorvastatin",
          med_n_dosage: "80 mg",
          med_n_route: "PO",
          med_n_frequency: "Daily",
          med_n_status: "Active",
          med_n_pa_required: false
        },
        {
          med_n_name: "Metoprolol",
          med_n_dosage: "50 mg",
          med_n_route: "PO",
          med_n_frequency: "BID",
          med_n_status: "Active",
          med_n_pa_required: false
        }
      ],
      treatments: [
        {
          treatment_n_name: "Percutaneous Coronary Intervention",
          treatment_n_status: "Completed",
          treatment_n_details: "Drug-eluting stent to LAD",
          treatment_n_date: "2023-07-12",
          treatment_n_pa_required: true
        },
        {
          treatment_n_name: "Cardiac Rehabilitation",
          treatment_n_status: "Planned",
          treatment_n_details: "To start after discharge",
          treatment_n_date: "2023-07-20",
          treatment_n_pa_required: true
        }
      ],
      last_imaging_summary: "Cardiac catheterization shows 90% stenosis of proximal LAD, treated with DES",
      last_ecg_summary: "ST elevation in leads V2-V4, consistent with anterior wall MI."
    }
  },
  {
    name: "Pediatric Asthma",
    description: "8-year-old male with asthma exacerbation",
    data: {
      patient_full_name: "Ethan Davis",
      patient_age: "8",
      patient_gender: "Male",
      patient_mrn: "MRN123789",
      patient_dob: "2015-02-18",
      patient_insurance_plan: "Aetna Kids",
      patient_policy_number: "AetnaKids123789",
      patient_primary_provider: "Dr. Susan Baker",
      patient_admission_date: "2023-07-08",
      allergies: ["Peanuts", "Dust Mites"],
      vitalSigns: {
        vital_bp: "100/60",
        vital_pulse: "110",
        vital_resp_rate: "28",
        vital_temp: "99.2",
        vital_o2sat: "92%",
        vital_pain_score: "2"
      },
      nyha_class_description: "N/A",
      primary_diagnosis_text: "Asthma",
      secondaryDiagnoses: ["Allergic Rhinitis"],
      labs: [
        {
          lab_n_name: "Complete Blood Count (CBC)",
          lab_n_value: "WBC 9.5",
          lab_n_flag: "N (Normal)",
          lab_n_trend: "Stable"
        }
      ],
      medications: [
        {
          med_n_name: "Albuterol",
          med_n_dosage: "2.5 mg",
          med_n_route: "Inhaled",
          med_n_frequency: "Every 4 hours",
          med_n_status: "Active",
          med_n_pa_required: false
        },
        {
          med_n_name: "Prednisone",
          med_n_dosage: "20 mg",
          med_n_route: "PO",
          med_n_frequency: "Daily",
          med_n_status: "Active",
          med_n_pa_required: false
        },
        {
          med_n_name: "Montelukast",
          med_n_dosage: "5 mg",
          med_n_route: "PO",
          med_n_frequency: "Daily",
          med_n_status: "Active",
          med_n_pa_required: false
        }
      ],
      treatments: [
        {
          treatment_n_name: "Nebulizer Treatments",
          treatment_n_status: "In progress",
          treatment_n_details: "Every 4 hours",
          treatment_n_date: "2023-07-08",
          treatment_n_pa_required: false
        }
      ],
      last_imaging_summary: "Chest X-ray shows hyperinflation without infiltrates",
      last_ecg_summary: "No recent ECG"
    }
  },
  {
    name: "Cancer Treatment",
    description: "54-year-old female with breast cancer",
    data: {
      patient_full_name: "Sarah Anderson",
      patient_age: "54",
      patient_gender: "Female",
      patient_mrn: "MRN567123",
      patient_dob: "1969-09-30",
      patient_insurance_plan: "Cigna",
      patient_policy_number: "Cigna567123",
      patient_primary_provider: "Dr. Maria Johnson",
      patient_admission_date: "2023-06-05",
      allergies: ["Iodine", "Latex"],
      vitalSigns: {
        vital_bp: "122/78",
        vital_pulse: "82",
        vital_resp_rate: "16",
        vital_temp: "98.8",
        vital_o2sat: "97%",
        vital_pain_score: "3"
      },
      nyha_class_description: "N/A",
      primary_diagnosis_text: "Cancer",
      secondaryDiagnoses: ["Anemia", "Iron Deficiency", "Fatigue"],
      labs: [
        {
          lab_n_name: "Complete Blood Count (CBC)",
          lab_n_value: "WBC 3.2, Hgb 9.5",
          lab_n_flag: "L (Low)",
          lab_n_trend: "Decreasing"
        },
        {
          lab_n_name: "Liver Function Tests (LFTs)",
          lab_n_value: "ALT 45, AST 42",
          lab_n_flag: "H (High)",
          lab_n_trend: "Stable"
        }
      ],
      medications: [
        {
          med_n_name: "Doxorubicin",
          med_n_dosage: "60 mg/m²",
          med_n_route: "IV",
          med_n_frequency: "Every 3 weeks",
          med_n_status: "Active",
          med_n_pa_required: true
        },
        {
          med_n_name: "Cyclophosphamide",
          med_n_dosage: "600 mg/m²",
          med_n_route: "IV",
          med_n_frequency: "Every 3 weeks",
          med_n_status: "Active",
          med_n_pa_required: true
        },
        {
          med_n_name: "Ondansetron",
          med_n_dosage: "8 mg",
          med_n_route: "PO",
          med_n_frequency: "Every 8 hours as needed",
          med_n_status: "Active",
          med_n_pa_required: false
        }
      ],
      treatments: [
        {
          treatment_n_name: "Chemotherapy",
          treatment_n_status: "In progress",
          treatment_n_details: "AC regimen, cycle 2 of 4",
          treatment_n_date: "2023-06-26",
          treatment_n_pa_required: true
        }
      ],
      last_imaging_summary: "CT chest/abdomen/pelvis shows partial response of primary breast mass, no evidence of metastatic disease",
      last_ecg_summary: "Normal sinus rhythm. QTc 450 ms."
    }
  }
];

// Empty form state template
const EMPTY_FORM_STATE: FormState = {
  patient_full_name: "",
  patient_age: "",
  patient_gender: "",
  patient_mrn: "",
  patient_dob: "",
  patient_insurance_plan: "",
  patient_policy_number: "",
  patient_primary_provider: "",
  patient_admission_date: "",
  allergies: [""],
  vitalSigns: {
    vital_bp: "",
    vital_pulse: "",
    vital_resp_rate: "",
    vital_temp: "",
    vital_o2sat: "",
    vital_pain_score: ""
  },
  nyha_class_description: "",
  primary_diagnosis_text: "",
  secondaryDiagnoses: [""],
  labs: [
    {
      lab_n_name: "",
      lab_n_value: "",
      lab_n_flag: "",
      lab_n_trend: ""
    }
  ],
  medications: [
    {
      med_n_name: "",
      med_n_dosage: "",
      med_n_route: "",
      med_n_frequency: "",
      med_n_status: "",
      med_n_pa_required: false
    }
  ],
  treatments: [
    {
      treatment_n_name: "",
      treatment_n_status: "",
      treatment_n_details: "",
      treatment_n_date: "",
      treatment_n_pa_required: false
    }
  ],
  last_imaging_summary: "",
  last_ecg_summary: ""
};

// TypeScript Interfaces
export interface VitalSigns {
  vital_bp: string;
  vital_pulse: string;
  vital_resp_rate: string;
  vital_temp: string;
  vital_o2sat: string;
  vital_pain_score: string;
}

export interface LabResult {
  lab_n_name: string;
  lab_n_value: string;
  lab_n_flag: string;
  lab_n_trend: string;
}

export interface Medication {
  med_n_name: string;
  med_n_dosage: string;
  med_n_route: string;
  med_n_frequency: string;
  med_n_status: string;
  med_n_pa_required: boolean;
}

export interface Treatment {
  treatment_n_name: string;
  treatment_n_status: string;
  treatment_n_details: string;
  treatment_n_date: string;
  treatment_n_pa_required: boolean;
}

export interface FormState {
  // Patient Data
  patient_full_name: string;
  patient_age: string;
  patient_gender: string;
  patient_mrn: string;
  patient_dob: string;
  patient_insurance_plan: string;
  patient_policy_number: string;
  patient_primary_provider: string;
  patient_admission_date: string;
  allergies: string[];
  vitalSigns: VitalSigns;
  nyha_class_description: string;

  // Clinical Data
  primary_diagnosis_text: string;
  secondaryDiagnoses: string[];
  labs: LabResult[];
  medications: Medication[];
  treatments: Treatment[];
  last_imaging_summary: string;
  last_ecg_summary: string;
}

interface PatientDataFormProps {
  onSubmit: (data: FormState) => void; // Removed useStreaming parameter
  isLoading: boolean;
}

const PatientDataForm: React.FC<PatientDataFormProps> = ({ onSubmit, isLoading }) => {
  const [formState, setFormState] = useState<FormState>(SCENARIOS[0].data);
  const [selectedScenario, setSelectedScenario] = useState<string>(SCENARIOS[0].name);
  // Set all sections to be initially expanded for better visibility
  const [expandedSections, setExpandedSections] = useState<string[]>(['demographics', 'vitals', 'allergies', 'diagnoses', 'labs', 'medications', 'treatments', 'imaging']);

  const toggleSection = (sectionId: string) => {
    setExpandedSections(prev => 
      prev.includes(sectionId) 
        ? prev.filter(id => id !== sectionId)
        : [...prev, sectionId]
    );
  };

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
  ): void => {
    const { name, value } = e.target;
    
    // Handle nested properties using dot notation in name
    if (name.includes('.')) {
      const [parent, child] = name.split('.');
      
      if (parent === 'vitalSigns') {
        setFormState(prev => ({
          ...prev,
          vitalSigns: {
            ...prev.vitalSigns,
            [child]: value
          }
        }));
      }
    } else {
      setFormState(prev => ({ ...prev, [name]: value }));
    }
  };

  const handleSelectChange = (name: string, value: string): void => {
    // Handle nested properties using dot notation in name
    if (name.includes('.')) {
      const [parent, child] = name.split('.');
      setFormState(prev => {
        // Safely handle nested properties by properly typing the parent object
        if (parent === 'vitalSigns') {
          return {
            ...prev,
            vitalSigns: {
              ...prev.vitalSigns,
              [child]: value
            }
          };
        }
        return prev;
      });
    } else {
      setFormState(prev => ({ ...prev, [name]: value }));
    }
  };

  // Proper type discriminated union for the array handling functions
  type ArrayKeys = 'labs' | 'medications' | 'treatments' | 'allergies' | 'secondaryDiagnoses';

  const handleArrayChange = (
    index: number,
    field: string,
    value: string | boolean,
    arrayName: Extract<keyof FormState, 'labs' | 'medications' | 'treatments'>
  ): void => {
    setFormState(prev => {
      if (arrayName === 'labs') {
        const labsArray = [...prev.labs];
        labsArray[index] = { ...labsArray[index], [field]: value };
        return { ...prev, labs: labsArray };
      } 
      else if (arrayName === 'medications') {
        const medsArray = [...prev.medications];
        medsArray[index] = { ...medsArray[index], [field]: value };
        return { ...prev, medications: medsArray };
      }
      else if (arrayName === 'treatments') {
        const treatmentsArray = [...prev.treatments];
        treatmentsArray[index] = { ...treatmentsArray[index], [field]: value };
        return { ...prev, treatments: treatmentsArray };
      }
      return prev;
    });
  };

  const handleStringArrayChange = (
    index: number,
    value: string,
    arrayName: Extract<keyof FormState, 'allergies' | 'secondaryDiagnoses'>
  ): void => {
    setFormState(prev => {
      if (arrayName === 'allergies') {
        const newArray = [...prev.allergies];
        newArray[index] = value;
        return { ...prev, allergies: newArray };
      }
      else if (arrayName === 'secondaryDiagnoses') {
        const newArray = [...prev.secondaryDiagnoses];
        newArray[index] = value;
        return { ...prev, secondaryDiagnoses: newArray };
      }
      return prev;
    });
  };

  const addItemToArray = <T extends object | string>(
    arrayName: ArrayKeys,
    template: T
  ): void => {
    setFormState(prev => {
      if (arrayName === 'labs') {
        return { ...prev, labs: [...prev.labs, template as LabResult] };
      }
      else if (arrayName === 'medications') {
        return { ...prev, medications: [...prev.medications, template as Medication] };
      }
      else if (arrayName === 'treatments') {
        return { ...prev, treatments: [...prev.treatments, template as Treatment] };
      }
      else if (arrayName === 'allergies') {
        return { ...prev, allergies: [...prev.allergies, template as string] };
      }
      else if (arrayName === 'secondaryDiagnoses') {
        return { ...prev, secondaryDiagnoses: [...prev.secondaryDiagnoses, template as string] };
      }
      return prev;
    });
  };

  const removeFromArray = (
    arrayName: ArrayKeys,
    index: number
  ): void => {
    setFormState(prev => {
      if (arrayName === 'labs') {
        const newArray = [...prev.labs];
        newArray.splice(index, 1);
        return { ...prev, labs: newArray };
      }
      else if (arrayName === 'medications') {
        const newArray = [...prev.medications];
        newArray.splice(index, 1);
        return { ...prev, medications: newArray };
      }
      else if (arrayName === 'treatments') {
        const newArray = [...prev.treatments];
        newArray.splice(index, 1);
        return { ...prev, treatments: newArray };
      }
      else if (arrayName === 'allergies') {
        const newArray = [...prev.allergies];
        newArray.splice(index, 1);
        return { ...prev, allergies: newArray };
      }
      else if (arrayName === 'secondaryDiagnoses') {
        const newArray = [...prev.secondaryDiagnoses];
        newArray.splice(index, 1);
        return { ...prev, secondaryDiagnoses: newArray };
      }
      return prev;
    });
  };

  const handleScenarioChange = (scenario: string) => {
    setSelectedScenario(scenario);
    
    // Find the selected scenario data and update form state
    const selectedScenarioData = SCENARIOS.find(s => s.name === scenario);
    if (selectedScenarioData) {
      setFormState(selectedScenarioData.data);
      setNotification({
        message: `Loaded scenario: ${scenario}`,
        type: 'success'
      });
      
      // Auto-dismiss notification after 3 seconds
      setTimeout(() => {
        setNotification(null);
      }, 3000);
    } else if (scenario === "Custom") {
      setFormState(EMPTY_FORM_STATE);
      setNotification({
        message: 'Started with blank form',
        type: 'info'
      });
      
      // Auto-dismiss notification after 3 seconds
      setTimeout(() => {
        setNotification(null);
      }, 3000);
    }
  };

  const handleSubmit = (/* removed useStreaming: boolean */) => {
    // Basic validation
    if (!formState.patient_full_name || !formState.primary_diagnosis_text) {
      setNotification({
        message: 'Please fill out required fields (name and primary diagnosis)',
        type: 'error'
      });
      return;
    }
    
    // Always streaming now
    setNotification({
      message: 'Starting streaming generation...',
      type: 'info'
    });
    
    onSubmit(formState); // Pass only formState
  };
  
  const [connectionStatus, setConnectionStatus] = useState<'unknown' | 'connected' | 'error'>('unknown');
  const [connectionError, setConnectionError] = useState<string | null>(null);
  const [notification, setNotification] = useState<{message: string, type: 'success' | 'error' | 'info'} | null>(null);
  
  // Test the connection to the backend
  const testBackend = async () => {
    try {
      setConnectionStatus('unknown');
      setConnectionError(null);

      const response = await fetch('/api/careplan/test', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          test: true,
          timestamp: new Date().toISOString()
        }),
      });
      
      const data = await response.json();
      console.log('Test response:', data);
      
      if (data.status === 'success') {
        setConnectionStatus('connected');
        console.log('Backend connection successful');
      } else {
        setConnectionStatus('error');
        setConnectionError(data.message || 'Unknown error');
        console.error(`Backend connection failed: ${data.message}`);
      }
    } catch (error) {
      console.error('Test error:', error);
      setConnectionStatus('error');
      setConnectionError(error instanceof Error ? error.message : String(error));
      console.error('Test error: ' + String(error));
    }
  };
  
  // Check connection on mount
  useEffect(() => {
    testBackend();
  }, []);

  // Current date for the date inputs
  const today = new Date().toISOString().split('T')[0];

  // Define CSS keyframes for the notification animation
  const fadeInDownKeyframes = `
    @keyframes fadeInDown {
      from {
        opacity: 0;
        transform: translate3d(0, -20px, 0);
      }
      to {
        opacity: 1;
        transform: translate3d(0, 0, 0);
      }
    }
  `;

  return (
    <div className="container mx-auto py-6">
      {/* Add the keyframe animation to the page */}
      <style>{fadeInDownKeyframes}</style>
      
      <div 
        className="absolute inset-0 -z-10 bg-[#0d0d15] bg-gradient-to-b from-[#0a0a18] via-[#0d0d15] to-[#05051a] overflow-hidden"
        style={{
          backgroundImage: `radial-gradient(circle at 20% 70%, rgba(20, 70, 120, 0.15), transparent 30%), 
                            radial-gradient(circle at 80% 40%, rgba(80, 20, 120, 0.15), transparent 40%)`,
        }}
      >
        {/* Animated grid lines for cyberpunk effect */}
        <div 
          className="absolute inset-0" 
          style={{
            backgroundImage: `
              linear-gradient(to right, rgba(66, 153, 225, 0.03) 1px, transparent 1px),
              linear-gradient(to bottom, rgba(66, 153, 225, 0.03) 1px, transparent 1px)
            `,
            backgroundSize: '40px 40px',
            opacity: 0.5,
          }}
        />
        
        {/* Animated glow orbs */}
        <div className="absolute top-[20%] left-[10%] w-[200px] h-[200px] rounded-full bg-cyan-500/5 blur-[100px] animate-pulse" style={{ animationDuration: '7s' }} />
        <div className="absolute top-[60%] right-[10%] w-[300px] h-[300px] rounded-full bg-indigo-500/5 blur-[120px] animate-pulse" style={{ animationDuration: '10s' }} />
        <div className="absolute bottom-[10%] left-[30%] w-[250px] h-[250px] rounded-full bg-violet-500/5 blur-[100px] animate-pulse" style={{ animationDuration: '8s' }} />
      </div>

      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-cyan-400 to-indigo-500">
          Care Plan Generator
        </h1>
        <p className="text-zinc-400 mt-2">Generate comprehensive care plans with detailed patient information</p>
      </div>
      
      {/* Notification System */}
      {notification && (
        <div 
          className={`fixed top-4 right-4 max-w-sm px-4 py-3 rounded-lg border shadow-xl backdrop-blur-md animate-fade-in-down z-50 
            ${notification.type === 'success' ? 'bg-green-900/70 border-green-600 text-green-100' : 
              notification.type === 'error' ? 'bg-red-900/70 border-red-600 text-red-100' : 
              'bg-blue-900/70 border-blue-600 text-blue-100'}`}
          style={{ animation: 'fadeInDown 0.3s ease-out' }}
        >
          <div className="flex items-center">
            {notification.type === 'success' && <Check className="h-5 w-5 mr-2 text-green-400" />}
            {notification.type === 'error' && <AlertCircle className="h-5 w-5 mr-2 text-red-400" />}
            {notification.type === 'info' && <FileText className="h-5 w-5 mr-2 text-blue-400" />}
            <p className="font-medium text-sm">{notification.message}</p>
          </div>
        </div>
      )}

      <Card className="backdrop-blur-md bg-black/30 border border-zinc-800/50 shadow-xl shadow-black/30 rounded-xl">
        <div className="p-6">
          {/* Scenario Selection */}
          <div className="mb-6">
            <div className="flex items-center mb-2">
              <label className="block text-zinc-200 text-sm font-medium">
                Select Scenario
              </label>
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button variant="ghost" size="icon" className="h-6 w-6 ml-1 text-zinc-400 hover:text-zinc-200">
                      <AlertCircle className="h-4 w-4" />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent className="bg-zinc-800 text-zinc-200 border-zinc-700">
                    <p className="text-xs">Choose a pre-filled patient scenario or start with a blank form</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </div>
            <Select
              value={selectedScenario}
              onValueChange={handleScenarioChange}
            >
              <SelectTrigger className="w-full bg-zinc-900/50 border-zinc-700/50 text-zinc-200">
                <SelectValue placeholder="Select a scenario" />
              </SelectTrigger>
              <SelectContent className="bg-zinc-900 border-zinc-700 text-zinc-200">
                {SCENARIOS.map((scenario) => (
                  <SelectItem key={scenario.name} value={scenario.name} className="hover:bg-zinc-800">
                    <div className="flex flex-col">
                      <span className="font-medium">{scenario.name}</span>
                      <span className="text-xs text-zinc-400">{scenario.description}</span>
                    </div>
                  </SelectItem>
                ))}
                <SelectItem value="Custom" className="hover:bg-zinc-800">
                  <div className="flex flex-col">
                    <span className="font-medium">Custom</span>
                    <span className="text-xs text-zinc-400">Start with a blank form</span>
                  </div>
                </SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <Separator className="my-4 bg-zinc-700/50" />

          {/* Expand/Collapse All Button */}
          <div className="flex justify-end mb-4">
            <Button
              variant="ghost"
              size="sm"
              onClick={() => {
                const allSections = ['demographics', 'vitals', 'allergies', 'diagnoses', 'labs', 'medications', 'treatments', 'imaging'];
                if (expandedSections.length === allSections.length) {
                  setExpandedSections([]);
                } else {
                  setExpandedSections(allSections);
                }
              }}
              className="text-zinc-400 hover:text-zinc-200 hover:bg-zinc-800/50"
            >
              {expandedSections.length === 8 ? (
                <>Collapse All Sections <ChevronDown className="ml-1 h-4 w-4" /></>
              ) : (
                <>Expand All Sections <PlusCircle className="ml-1 h-4 w-4" /></>
              )}
            </Button>
          </div>

          {/* Form Content */}
          <div className="space-y-4">
            <Accordion
              type="multiple"
              value={expandedSections}
              onValueChange={setExpandedSections}
              className="space-y-4"
            >
              {/* Demographics Section */}
              <AccordionItem 
                value="demographics" 
                className="border border-zinc-800/50 rounded-lg overflow-hidden bg-zinc-900/20"
              >
                <AccordionTrigger className="px-4 py-2 hover:bg-zinc-800/30 transition-colors">
                  <div className="flex items-center">
                    <UserCircle className="h-5 w-5 mr-2 text-cyan-400" />
                    <span className="text-zinc-200 font-medium">Demographics</span>
                  </div>
                </AccordionTrigger>
                <AccordionContent className="px-4 pb-4 pt-2 bg-black/20">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-zinc-300 mb-1">Full Name</label>
                      <Input
                        name="patient_full_name"
                        value={formState.patient_full_name}
                        onChange={handleChange}
                        className="bg-zinc-900/70 border-zinc-700/50 text-zinc-200"
                      />
                    </div>
                    
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-zinc-300 mb-1">Age</label>
                        <Input
                          name="patient_age"
                          value={formState.patient_age}
                          onChange={handleChange}
                          className="bg-zinc-900/70 border-zinc-700/50 text-zinc-200"
                          type="number"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-zinc-300 mb-1">Gender</label>
                        <Select
                          value={formState.patient_gender}
                          onValueChange={(value) => handleSelectChange("patient_gender", value)}
                        >
                          <SelectTrigger className="w-full bg-zinc-900/70 border-zinc-700/50 text-zinc-200">
                            <SelectValue placeholder="Select gender" />
                          </SelectTrigger>
                          <SelectContent className="bg-zinc-900 border-zinc-700 text-zinc-200">
                            {GENDERS.map((gender) => (
                              <SelectItem key={gender} value={gender} className="hover:bg-zinc-800">
                                {gender}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                    <div>
                      <label className="block text-sm font-medium text-zinc-300 mb-1">MRN</label>
                      <Input
                        name="patient_mrn"
                        value={formState.patient_mrn}
                        onChange={handleChange}
                        className="bg-zinc-900/70 border-zinc-700/50 text-zinc-200"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-zinc-300 mb-1">Date of Birth</label>
                      <Input
                        name="patient_dob"
                        value={formState.patient_dob}
                        onChange={handleChange}
                        className="bg-zinc-900/70 border-zinc-700/50 text-zinc-200"
                        type="date"
                      />
                    </div>
                  </div>

                  <div className="mt-4">
                    <h3 className="text-sm font-medium text-zinc-300 mb-2">Insurance Information</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-zinc-300 mb-1">Insurance Plan</label>
                        <Select
                          value={formState.patient_insurance_plan}
                          onValueChange={(value) => handleSelectChange("patient_insurance_plan", value)}
                        >
                          <SelectTrigger className="w-full bg-zinc-900/70 border-zinc-700/50 text-zinc-200">
                            <SelectValue placeholder="Select insurance" />
                          </SelectTrigger>
                          <SelectContent className="bg-zinc-900 border-zinc-700 text-zinc-200">
                            {INSURANCE_PLANS.map((plan) => (
                              <SelectItem key={plan} value={plan} className="hover:bg-zinc-800">
                                {plan}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-zinc-300 mb-1">Policy Number</label>
                        <Input
                          name="patient_policy_number"
                          value={formState.patient_policy_number}
                          onChange={handleChange}
                          className="bg-zinc-900/70 border-zinc-700/50 text-zinc-200"
                        />
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                      <div>
                        <label className="block text-sm font-medium text-zinc-300 mb-1">Primary Provider</label>
                        <Input
                          name="patient_primary_provider"
                          value={formState.patient_primary_provider}
                          onChange={handleChange}
                          className="bg-zinc-900/70 border-zinc-700/50 text-zinc-200"
                        />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-zinc-300 mb-1">Admission Date</label>
                        <Input
                          name="patient_admission_date"
                          value={formState.patient_admission_date}
                          onChange={handleChange}
                          className="bg-zinc-900/70 border-zinc-700/50 text-zinc-200"
                          type="date"
                          max={today}
                        />
                      </div>
                    </div>
                  </div>
                </AccordionContent>
              </AccordionItem>

              {/* Vital Signs Section */}
              <AccordionItem
                value="vitals"
                className="border border-zinc-800/50 rounded-lg overflow-hidden bg-zinc-900/20"
              >
                <AccordionTrigger className="px-4 py-2 hover:bg-zinc-800/30 transition-colors">
                  <div className="flex items-center">
                    <Heart className="h-5 w-5 mr-2 text-rose-400" />
                    <span className="text-zinc-200 font-medium">Vital Signs</span>
                  </div>
                </AccordionTrigger>
                <AccordionContent className="px-4 pb-4 pt-2 bg-black/20">
                  <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-zinc-300 mb-1">Blood Pressure</label>
                      <Input
                        name="vitalSigns.vital_bp"
                        value={formState.vitalSigns.vital_bp}
                        onChange={handleChange}
                        className="bg-zinc-900/70 border-zinc-700/50 text-zinc-200"
                        placeholder="120/80"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-zinc-300 mb-1">Pulse</label>
                      <Input
                        name="vitalSigns.vital_pulse"
                        value={formState.vitalSigns.vital_pulse}
                        onChange={handleChange}
                        className="bg-zinc-900/70 border-zinc-700/50 text-zinc-200"
                        placeholder="72"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-zinc-300 mb-1">Respiratory Rate</label>
                      <Input
                        name="vitalSigns.vital_resp_rate"
                        value={formState.vitalSigns.vital_resp_rate}
                        onChange={handleChange}
                        className="bg-zinc-900/70 border-zinc-700/50 text-zinc-200"
                        placeholder="16"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-zinc-300 mb-1">Temperature</label>
                      <Input
                        name="vitalSigns.vital_temp"
                        value={formState.vitalSigns.vital_temp}
                        onChange={handleChange}
                        className="bg-zinc-900/70 border-zinc-700/50 text-zinc-200"
                        placeholder="98.6"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-zinc-300 mb-1">O2 Saturation</label>
                      <Input
                        name="vitalSigns.vital_o2sat"
                        value={formState.vitalSigns.vital_o2sat}
                        onChange={handleChange}
                        className="bg-zinc-900/70 border-zinc-700/50 text-zinc-200"
                        placeholder="97%"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-zinc-300 mb-1">Pain Score</label>
                      <Input
                        name="vitalSigns.vital_pain_score"
                        value={formState.vitalSigns.vital_pain_score}
                        onChange={handleChange}
                        className="bg-zinc-900/70 border-zinc-700/50 text-zinc-200"
                        placeholder="0-10"
                      />
                    </div>
                  </div>

                  <div className="mt-4">
                    <label className="block text-sm font-medium text-zinc-300 mb-1">NYHA Class (if applicable)</label>
                    <Select
                      value={formState.nyha_class_description}
                      onValueChange={(value) => handleSelectChange("nyha_class_description", value)}
                    >
                      <SelectTrigger className="w-full bg-zinc-900/70 border-zinc-700/50 text-zinc-200">
                        <SelectValue placeholder="Select NYHA class" />
                      </SelectTrigger>
                      <SelectContent className="bg-zinc-900 border-zinc-700 text-zinc-200">
                        <SelectItem value="N/A" className="hover:bg-zinc-800">N/A</SelectItem>
                        {NYHA_CLASSES.map((nyhaClass) => (
                          <SelectItem key={nyhaClass} value={nyhaClass} className="hover:bg-zinc-800">
                            {nyhaClass}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </AccordionContent>
              </AccordionItem>

              {/* Allergies Section */}
              <AccordionItem
                value="allergies"
                className="border border-zinc-800/50 rounded-lg overflow-hidden bg-zinc-900/20"
              >
                <AccordionTrigger className="px-4 py-2 hover:bg-zinc-800/30 transition-colors">
                  <div className="flex items-center">
                    <AlertCircle className="h-5 w-5 mr-2 text-amber-400" />
                    <span className="text-zinc-200 font-medium">Allergies</span>
                  </div>
                </AccordionTrigger>
                <AccordionContent className="px-4 pb-4 pt-2 bg-black/20">
                  {formState.allergies.map((allergy, index) => (
                    <div key={`allergy-${index}`} className="flex items-center gap-2 mb-2">
                      <Select
                        value={allergy}
                        onValueChange={(value) => handleStringArrayChange(index, value, 'allergies')}
                      >
                        <SelectTrigger className="w-full bg-zinc-900/70 border-zinc-700/50 text-zinc-200">
                          <SelectValue placeholder="Select allergy" />
                        </SelectTrigger>
                        <SelectContent className="bg-zinc-900 border-zinc-700 text-zinc-200 max-h-60">
                          <Command>
                          <CommandInput placeholder="Search allergies..." className="h-9 bg-zinc-800 text-zinc-200" />
                          <CommandList className="max-h-48">
                            <CommandEmpty>No allergies found</CommandEmpty>
                            <CommandGroup>
                              {ALLERGIES.map((allergyOption) => (
                                <CommandItem
                                  key={`${index}-${allergyOption}`}
                                  value={allergyOption}
                                  onSelect={() => handleStringArrayChange(index, allergyOption, 'allergies')}
                                  className="hover:bg-zinc-800"
                                >
                                  {allergyOption}
                                  {allergy === allergyOption && (
                                    <Check className="ml-auto h-4 w-4 text-green-500" />
                                  )}
                                </CommandItem>
                              ))}
                            </CommandGroup>
                          </CommandList>
                          </Command>
                        </SelectContent>
                      </Select>
                      <Button
                        type="button"
                        variant="ghost"
                        size="icon"
                        onClick={() => removeFromArray('allergies', index)}
                        className="h-9 w-9 text-zinc-400 hover:text-zinc-200 hover:bg-zinc-800/50"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  ))}
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => addItemToArray('allergies', '')}
                    className="mt-2 border-zinc-700 text-zinc-300 hover:bg-zinc-800/50 hover:text-zinc-200"
                  >
                    <Plus className="h-4 w-4 mr-2" /> Add Allergy
                  </Button>
                </AccordionContent>
              </AccordionItem>

              {/* Diagnoses Section */}
              <AccordionItem
                value="diagnoses"
                className="border border-zinc-800/50 rounded-lg overflow-hidden bg-zinc-900/20"
              >
                <AccordionTrigger className="px-4 py-2 hover:bg-zinc-800/30 transition-colors">
                  <div className="flex items-center">
                    <Clipboard className="h-5 w-5 mr-2 text-indigo-400" />
                    <span className="text-zinc-200 font-medium">Diagnoses</span>
                  </div>
                </AccordionTrigger>
                <AccordionContent className="px-4 pb-4 pt-2 bg-black/20">
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-zinc-300 mb-1">Primary Diagnosis</label>
                    <Select
                      value={formState.primary_diagnosis_text}
                      onValueChange={(value) => handleSelectChange("primary_diagnosis_text", value)}
                    >
                      <SelectTrigger className="w-full bg-zinc-900/70 border-zinc-700/50 text-zinc-200">
                        <SelectValue placeholder="Select primary diagnosis" />
                      </SelectTrigger>
                      <SelectContent className="bg-zinc-900 border-zinc-700 text-zinc-200 max-h-60">
                        <Command>
                          <CommandInput placeholder="Search diagnoses..." className="h-9 bg-zinc-800 text-zinc-200" />
                          <CommandList className="max-h-48">
                            <CommandEmpty>No diagnosis found</CommandEmpty>
                            <CommandGroup>
                              {DIAGNOSES.map((diagnosis) => (
                                <CommandItem
                                  key={diagnosis}
                                  value={diagnosis}
                                  onSelect={() => handleSelectChange("primary_diagnosis_text", diagnosis)}
                                  className="hover:bg-zinc-800"
                                >
                                  {diagnosis}
                                  {formState.primary_diagnosis_text === diagnosis && (
                                    <Check className="ml-auto h-4 w-4 text-green-500" />
                                  )}
                                </CommandItem>
                              ))}
                            </CommandGroup>
                          </CommandList>
                        </Command>
                      </SelectContent>
                    </Select>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-zinc-300 mb-1">Secondary Diagnoses</label>
                    {formState.secondaryDiagnoses.map((diagnosis, index) => (
                      <div key={`diagnosis-${index}`} className="flex items-center gap-2 mb-2">
                        <Select
                          value={diagnosis}
                          onValueChange={(value) => handleStringArrayChange(index, value, 'secondaryDiagnoses')}
                        >
                          <SelectTrigger className="w-full bg-zinc-900/70 border-zinc-700/50 text-zinc-200">
                            <SelectValue placeholder="Select diagnosis" />
                          </SelectTrigger>
                          <SelectContent className="bg-zinc-900 border-zinc-700 text-zinc-200 max-h-60">
                            <Command>
                              <CommandInput placeholder="Search diagnoses..." className="h-9 bg-zinc-800 text-zinc-200" />
                              <CommandList className="max-h-48">
                                <CommandEmpty>No diagnosis found</CommandEmpty>
                                <CommandGroup>
                                  {DIAGNOSES.filter(d =>
                                    d !== formState.primary_diagnosis_text &&
                                    !formState.secondaryDiagnoses.includes(d)).map((diagnosisOption) => (
                                    <CommandItem
                                      key={`${index}-${diagnosisOption}`}
                                      value={diagnosisOption}
                                      onSelect={() => handleStringArrayChange(index, diagnosisOption, 'secondaryDiagnoses')}
                                      className="hover:bg-zinc-800"
                                    >
                                      {diagnosisOption}
                                      {diagnosis === diagnosisOption && (
                                        <Check className="ml-auto h-4 w-4 text-green-500" />
                                      )}
                                    </CommandItem>
                                  ))}
                                </CommandGroup>
                              </CommandList>
                            </Command>
                                  d !== formState.primary_diagnosis_text &&
                                  !formState.secondaryDiagnoses.includes(d)).map((diagnosisOption) => (
                                  <CommandItem
                                    key={`${index}-${diagnosisOption}`}
                                    value={diagnosisOption}
                                    onSelect={() => handleStringArrayChange(index, diagnosisOption, 'secondaryDiagnoses')}
                                    className="hover:bg-zinc-800"
                                  >
                                    {diagnosisOption}
                                    {diagnosis === diagnosisOption && (
                                      <Check className="ml-auto h-4 w-4 text-green-500" />
                                    )}
                                  </CommandItem>
                                ))}
                              </CommandGroup>
                            </CommandList>
                          </SelectContent>
                        </Select>
                        <Button
                          type="button"
                          variant="ghost"
                          size="icon"
                          onClick={() => removeFromArray('secondaryDiagnoses', index)}
                          className="h-9 w-9 text-zinc-400 hover:text-zinc-200 hover:bg-zinc-800/50"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                    ))}
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={() => addItemToArray('secondaryDiagnoses', '')}
                      className="mt-2 border-zinc-700 text-zinc-300 hover:bg-zinc-800/50 hover:text-zinc-200"
                    >
                      <Plus className="h-4 w-4 mr-2" /> Add Secondary Diagnosis
                    </Button>
                  </div>
                </AccordionContent>
              </AccordionItem>

              {/* Lab Results Section */}
              <AccordionItem
                value="labs"
                className="border border-zinc-800/50 rounded-lg overflow-hidden bg-zinc-900/20"
              >
                <AccordionTrigger className="px-4 py-2 hover:bg-zinc-800/30 transition-colors">
                  <div className="flex items-center">
                    <FlaskConical className="h-5 w-5 mr-2 text-emerald-400" />
                    <span className="text-zinc-200 font-medium">Lab Results</span>
                  </div>
                </AccordionTrigger>
                <AccordionContent className="px-4 pb-4 pt-2 bg-black/20">
                  {formState.labs.map((lab, index) => (
                    <div key={`lab-${index}`} className="p-3 border border-zinc-800/50 rounded-md mb-3 bg-zinc-900/30">
                      <div className="flex justify-between items-center mb-2">
                        <h3 className="text-sm font-medium text-zinc-300">Lab #{index + 1}</h3>
                        <Button
                          type="button"
                          variant="ghost"
                          size="icon"
                          onClick={() => removeFromArray('labs', index)}
                          className="h-8 w-8 text-zinc-400 hover:text-zinc-200 hover:bg-zinc-800/50"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        <div>
                          <label className="block text-sm font-medium text-zinc-400 mb-1">Test Name</label>
                          <Select
                            value={lab.lab_n_name}
                            onValueChange={(value) => handleArrayChange(index, 'lab_n_name', value, 'labs')}
                          >
                            <SelectTrigger className="w-full bg-zinc-900/70 border-zinc-700/50 text-zinc-200">
                              <SelectValue placeholder="Select test" />
                            </SelectTrigger>
                            <SelectContent className="bg-zinc-900 border-zinc-700 text-zinc-200 max-h-60">
                              <CommandInput placeholder="Search tests..." className="h-9 bg-zinc-800 text-zinc-200" />
                              <CommandList className="max-h-48">
                                <CommandEmpty>No tests found</CommandEmpty>
                                <CommandGroup>
                                  {LAB_TESTS.map((test) => (
                                    <CommandItem
                                      key={`${index}-${test}`}
                                      value={test}
                                      onSelect={() => handleArrayChange(index, 'lab_n_name', test, 'labs')}
                                      className="hover:bg-zinc-800"
                                    >
                                      {test}
                                      {lab.lab_n_name === test && (
                                        <Check className="ml-auto h-4 w-4 text-green-500" />
                                      )}
                                    </CommandItem>
                                  ))}
                                </CommandGroup>
                              </CommandList>
                            </SelectContent>
                          </Select>
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-zinc-400 mb-1">Value</label>
                          <Input
                            value={lab.lab_n_value}
                            onChange={(e) => handleArrayChange(index, 'lab_n_value', e.target.value, 'labs')}
                            className="bg-zinc-900/70 border-zinc-700/50 text-zinc-200"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-zinc-400 mb-1">Flag</label>
                          <Select
                            value={lab.lab_n_flag}
                            onValueChange={(value) => handleArrayChange(index, 'lab_n_flag', value, 'labs')}
                          >
                            <SelectTrigger className="w-full bg-zinc-900/70 border-zinc-700/50 text-zinc-200">
                              <SelectValue placeholder="Select flag" />
                            </SelectTrigger>
                            <SelectContent className="bg-zinc-900 border-zinc-700 text-zinc-200">
                              {FLAGS.map((flag) => (
                                <SelectItem key={`${index}-${flag}`} value={flag} className="hover:bg-zinc-800">
                                  {flag}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-zinc-400 mb-1">Trend</label>
                          <Select
                            value={lab.lab_n_trend}
                            onValueChange={(value) => handleArrayChange(index, 'lab_n_trend', value, 'labs')}
                          >
                            <SelectTrigger className="w-full bg-zinc-900/70 border-zinc-700/50 text-zinc-200">
                              <SelectValue placeholder="Select trend" />
                            </SelectTrigger>
                            <SelectContent className="bg-zinc-900 border-zinc-700 text-zinc-200">
                              {TRENDS.map((trend) => (
                                <SelectItem key={`${index}-${trend}`} value={trend} className="hover:bg-zinc-800">
                                  {trend}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                      </div>
                    </div>
                  ))}
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => addItemToArray('labs', {
                      lab_n_name: "",
                      lab_n_value: "",
                      lab_n_flag: "",
                      lab_n_trend: ""
                    })}
                    className="mt-2 border-zinc-700 text-zinc-300 hover:bg-zinc-800/50 hover:text-zinc-200"
                  >
                    <Plus className="h-4 w-4 mr-2" /> Add Lab Result
                  </Button>
                </AccordionContent>
              </AccordionItem>

              {/* Medications Section */}
              <AccordionItem
                value="medications"
                className="border border-zinc-800/50 rounded-lg overflow-hidden bg-zinc-900/20"
              >
                <AccordionTrigger className="px-4 py-2 hover:bg-zinc-800/30 transition-colors">
                  <div className="flex items-center">
                    <Pill className="h-5 w-5 mr-2 text-blue-400" />
                    <span className="text-zinc-200 font-medium">Medications</span>
                  </div>
                </AccordionTrigger>
                <AccordionContent className="px-4 pb-4 pt-2 bg-black/20">
                  {formState.medications.map((med, index) => (
                    <div key={`med-${index}`} className="p-3 border border-zinc-800/50 rounded-md mb-3 bg-zinc-900/30">
                      <div className="flex justify-between items-center mb-2">
                        <h3 className="text-sm font-medium text-zinc-300">Medication #{index + 1}</h3>
                        <Button
                          type="button"
                          variant="ghost"
                          size="icon"
                          onClick={() => removeFromArray('medications', index)}
                          className="h-8 w-8 text-zinc-400 hover:text-zinc-200 hover:bg-zinc-800/50"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>

                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        <div>
                          <label className="block text-sm font-medium text-zinc-400 mb-1">Name</label>
                          <Select
                            value={med.med_n_name}
                            onValueChange={(value) => handleArrayChange(index, 'med_n_name', value, 'medications')}
                          >
                            <SelectTrigger className="w-full bg-zinc-900/70 border-zinc-700/50 text-zinc-200">
                              <SelectValue placeholder="Select medication" />
                            </SelectTrigger>
                            <SelectContent className="bg-zinc-900 border-zinc-700 text-zinc-200 max-h-60">
                              <CommandInput placeholder="Search medications..." className="h-9 bg-zinc-800 text-zinc-200" />
                              <CommandList className="max-h-48">
                                <CommandEmpty>No medications found</CommandEmpty>
                                <CommandGroup>
                                  {MEDICATIONS.map((medication) => (
                                    <CommandItem
                                      key={`${index}-${medication}`}
                                      value={medication}
                                      onSelect={() => handleArrayChange(index, 'med_n_name', medication, 'medications')}
                                      className="hover:bg-zinc-800"
                                    >
                                      {medication}
                                      {med.med_n_name === medication && (
                                        <Check className="ml-auto h-4 w-4 text-green-500" />
                                      )}
                                    </CommandItem>
                                  ))}
                                </CommandGroup>
                              </CommandList>
                            </SelectContent>
                          </Select>
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-zinc-400 mb-1">Dosage</label>
                          <Input
                            value={med.med_n_dosage}
                            onChange={(e) => handleArrayChange(index, 'med_n_dosage', e.target.value, 'medications')}
                            className="bg-zinc-900/70 border-zinc-700/50 text-zinc-200"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-zinc-400 mb-1">Route</label>
                          <Select
                            value={med.med_n_route}
                            onValueChange={(value) => handleArrayChange(index, 'med_n_route', value, 'medications')}
                          >
                            <SelectTrigger className="w-full bg-zinc-900/70 border-zinc-700/50 text-zinc-200">
                              <SelectValue placeholder="Select route" />
                            </SelectTrigger>
                            <SelectContent className="bg-zinc-900 border-zinc-700 text-zinc-200">
                              {MED_ROUTES.map((route) => (
                                <SelectItem key={`${index}-${route}`} value={route} className="hover:bg-zinc-800">
                                  {route}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-zinc-400 mb-1">Frequency</label>
                          <Select
                            value={med.med_n_frequency}
                            onValueChange={(value) => handleArrayChange(index, 'med_n_frequency', value, 'medications')}
                          >
                            <SelectTrigger className="w-full bg-zinc-900/70 border-zinc-700/50 text-zinc-200">
                              <SelectValue placeholder="Select frequency" />
                            </SelectTrigger>
                            <SelectContent className="bg-zinc-900 border-zinc-700 text-zinc-200">
                              {MED_FREQUENCIES.map((frequency) => (
                                <SelectItem key={`${index}-${frequency}`} value={frequency} className="hover:bg-zinc-800">
                                  {frequency}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-zinc-400 mb-1">Status</label>
                          <Select
                            value={med.med_n_status}
                            onValueChange={(value) => handleArrayChange(index, 'med_n_status', value, 'medications')}
                          >
                            <SelectTrigger className="w-full bg-zinc-900/70 border-zinc-700/50 text-zinc-200">
                              <SelectValue placeholder="Select status" />
                            </SelectTrigger>
                            <SelectContent className="bg-zinc-900 border-zinc-700 text-zinc-200">
                              {MED_STATUSES.map((status) => (
                                <SelectItem key={`${index}-${status}`} value={status} className="hover:bg-zinc-800">
                                  {status}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                        <div className="flex items-center">
                          <div className="flex items-center space-x-2">
                            <Checkbox
                              id={`pa-required-${index}`}
                              checked={med.med_n_pa_required}
                              onCheckedChange={(checked) =>
                                handleArrayChange(index, 'med_n_pa_required', Boolean(checked), 'medications')
                              }
                              className="border-zinc-700 data-[state=checked]:bg-blue-600"
                            />
                            <label
                              htmlFor={`pa-required-${index}`}
                              className="text-sm font-medium text-zinc-400 cursor-pointer"
                            >
                              Prior Authorization Required
                            </label>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => addItemToArray('medications', {
                      med_n_name: "",
                      med_n_dosage: "",
                      med_n_route: "",
                      med_n_frequency: "",
                      med_n_status: "",
                      med_n_pa_required: false
                    })}
                    className="mt-2 border-zinc-700 text-zinc-300 hover:bg-zinc-800/50 hover:text-zinc-200"
                  >
                    <Plus className="h-4 w-4 mr-2" /> Add Medication
                  </Button>
                </AccordionContent>
              </AccordionItem>

              {/* Treatments Section */}
              <AccordionItem 
                value="treatments" 
                className="border border-zinc-800/50 rounded-lg overflow-hidden bg-zinc-900/20"
              >
                <AccordionTrigger className="px-4 py-2 hover:bg-zinc-800/30 transition-colors">
                  <div className="flex items-center">
                    <Stethoscope className="h-5 w-5 mr-2 text-violet-400" />
                    <span className="text-zinc-200 font-medium">Treatments</span>
                  </div>
                </AccordionTrigger>
                <AccordionContent className="px-4 pb-4 pt-2 bg-black/20">
                  {formState.treatments.map((treatment: Treatment, index: number) => (
                    <div key={`treatment-${index}`} className="p-3 border border-zinc-800/50 rounded-md mb-3 bg-zinc-900/30">
                      <div className="flex justify-between items-center mb-2">
                        <h3 className="text-sm font-medium text-zinc-300">Treatment #{index + 1}</h3>
                        <Button
                          type="button"
                          variant="ghost"
                          size="icon"
                          onClick={() => removeFromArray('treatments', index)}
                          className="h-8 w-8 text-zinc-400 hover:text-zinc-200 hover:bg-zinc-800/50"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                        <div>
                          <label className="block text-sm font-medium text-zinc-400 mb-1">Name</label>
                          <Select
                            value={treatment.treatment_n_name}
                            onValueChange={(value) => handleArrayChange(index, 'treatment_n_name', value, 'treatments')}
                          >
                            <SelectTrigger className="w-full bg-zinc-900/70 border-zinc-700/50 text-zinc-200">
                              <SelectValue placeholder="Select treatment" />
                            </SelectTrigger>
                            <SelectContent className="bg-zinc-900 border-zinc-700 text-zinc-200 max-h-60">
                              <CommandInput placeholder="Search treatments..." className="h-9 bg-zinc-800 text-zinc-200" />
                              <CommandList className="max-h-48">
                                <CommandEmpty>No treatments found</CommandEmpty>
                                <CommandGroup>
                                  {TREATMENTS.map((treatmentOption) => (
                                    <CommandItem 
                                      key={`${index}-${treatmentOption}`}
                                      value={treatmentOption}
                                      onSelect={() => handleArrayChange(index, 'treatment_n_name', treatmentOption, 'treatments')}
                                      className="hover:bg-zinc-800"
                                    >
                                      {treatmentOption}
                                      {treatment.treatment_n_name === treatmentOption && (
                                        <Check className="ml-auto h-4 w-4 text-green-500" />
                                      )}
                                    </CommandItem>
                                  ))}
                                </CommandGroup>
                              </CommandList>
                            </SelectContent>
                          </Select>
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-zinc-400 mb-1">Status</label>
                          <Select
                            value={treatment.treatment_n_status}
                            onValueChange={(value) => handleArrayChange(index, 'treatment_n_status', value, 'treatments')}
                          >
                            <SelectTrigger className="w-full bg-zinc-900/70 border-zinc-700/50 text-zinc-200">
                              <SelectValue placeholder="Select status" />
                            </SelectTrigger>
                            <SelectContent className="bg-zinc-900 border-zinc-700 text-zinc-200">
                              {TREATMENT_STATUSES.map((status) => (
                                <SelectItem key={`${index}-${status}`} value={status} className="hover:bg-zinc-800">
                                  {status}
                                </SelectItem>
                              ))}
                            </SelectContent>
                          </Select>
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-zinc-400 mb-1">Details</label>
                          <Input
                            value={treatment.treatment_n_details}
                            onChange={(e) => handleArrayChange(index, 'treatment_n_details', e.target.value, 'treatments')}
                            className="bg-zinc-900/70 border-zinc-700/50 text-zinc-200"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-zinc-400 mb-1">Date</label>
                          <Input
                            value={treatment.treatment_n_date}
                            onChange={(e) => handleArrayChange(index, 'treatment_n_date', e.target.value, 'treatments')}
                            type="date"
                            className="bg-zinc-900/70 border-zinc-700/50 text-zinc-200"
                          />
                        </div>
                        <div className="flex items-center">
                          <div className="flex items-center space-x-2">
                            <Checkbox 
                              id={`treatment-pa-required-${index}`} 
                              checked={treatment.treatment_n_pa_required}
                              onCheckedChange={(checked) => 
                                handleArrayChange(index, 'treatment_n_pa_required', Boolean(checked), 'treatments')
                              }
                              className="border-zinc-700 data-[state=checked]:bg-blue-600"
                            />
                            <label
                              htmlFor={`treatment-pa-required-${index}`}
                              className="text-sm font-medium text-zinc-400 cursor-pointer"
                            >
                              Prior Authorization Required
                            </label>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => addItemToArray('treatments', {
                      treatment_n_name: "",
                      treatment_n_status: "",
                      treatment_n_details: "",
                      treatment_n_date: "",
                      treatment_n_pa_required: false
                    })}
                    className="mt-2 border-zinc-700 text-zinc-300 hover:bg-zinc-800/50 hover:text-zinc-200"
                  >
                    <Plus className="h-4 w-4 mr-2" /> Add Treatment
                  </Button>
                </AccordionContent>
              </AccordionItem>

              {/* Imaging & Diagnostics Section */}
              <AccordionItem 
                value="imaging" 
                className="border border-zinc-800/50 rounded-lg overflow-hidden bg-zinc-900/20"
              >
                <AccordionTrigger className="px-4 py-2 hover:bg-zinc-800/30 transition-colors">
                  <div className="flex items-center">
                    <Radiation className="h-5 w-5 mr-2 text-amber-400" />
                    <span className="text-zinc-200 font-medium">Imaging & Diagnostics</span>
                  </div>
                </AccordionTrigger>
                <AccordionContent className="px-4 pb-4 pt-2 bg-black/20">
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-zinc-300 mb-1">Last Imaging Summary</label>
                    <Textarea
                      name="last_imaging_summary"
                      value={formState.last_imaging_summary}
                      onChange={handleChange}
                      rows={3}
                      className="bg-zinc-900/70 border-zinc-700/50 text-zinc-200 resize-none"
                      placeholder="Enter imaging summary..."
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-zinc-300 mb-1">Last ECG Summary</label>
                    <Textarea
                      name="last_ecg_summary"
                      value={formState.last_ecg_summary}
                      onChange={handleChange}
                      rows={3}
                      className="bg-zinc-900/70 border-zinc-700/50 text-zinc-200 resize-none"
                      placeholder="Enter ECG summary..."
                    />
                  </div>
                </AccordionContent>
              </AccordionItem>
            </Accordion>
          </div>

          {/* Submit Buttons */}
          <div className="mt-8 flex flex-col sm:flex-row gap-4 justify-center">
            {connectionStatus === 'error' && (
              <div className="w-full mb-4 p-3 bg-red-900/50 border border-red-700 rounded-md text-red-200 text-sm">
                <div className="font-medium mb-1 flex items-center">
                  <AlertCircle className="h-4 w-4 mr-2" /> Connection Error
                </div>
                <p>{connectionError || "Unable to connect to backend. Please try again later."}</p>
              </div>
            )}
            
            <TooltipProvider>
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button 
                    onClick={handleSubmit} // Removed hardcoded true
                    disabled={isLoading}
                    className="w-full sm:w-auto bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-500 hover:to-blue-500 text-white border-0"
                  >
                    {isLoading ? (
                      <> 
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Generating...
                      </>
                    ) : (
                      <>Submit</>
                    )}
                  </Button>
                </TooltipTrigger>
                <TooltipContent className="bg-zinc-800 text-zinc-200 border-zinc-700">
                  <p className="text-xs">Generate care plan with streaming responses</p>
                </TooltipContent>
              </Tooltip>
            </TooltipProvider>
          </div>
        </div>
      </Card>
    </div>
  );
};

export default PatientDataForm;
